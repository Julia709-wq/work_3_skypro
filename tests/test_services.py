import pytest
import json
from unittest.mock import patch, Mock
from src.services import simple_search, search_personal_transfers


@pytest.fixture
def test_data():
    return [
        {"Дата операции": "2023-10-01", "Сумма операции": -1000.0, "Категория": "Еда", "Описание": "Магазин"},
        {"Дата операции": "2023-10-02", "Сумма операции": -500.0, "Категория": "Транспорт", "Описание": "Такси"},
        {"Дата операции": "2023-10-03", "Сумма операции": -1500.0, "Категория": "Переводы", "Описание": "Иван Ф."},
        {"Дата операции": "2023-10-04", "Сумма операции": -200.0, "Категория": "Еда", "Описание": "Кафе"},
        {"Дата операции": "2023-10-05", "Сумма операции": -3000.0, "Категория": "Одежда", "Описание": "Магазин"}
    ]


def test_simple_search_match_in_description(test_data):
    search_string = "Магазин"

    expected_result = json.dumps(
        [{"Дата операции": "2023-10-01", "Сумма операции": -1000.0,
          "Категория": "Еда", "Описание": "Магазин"},
         {"Дата операции": "2023-10-05", "Сумма операции": -3000.0,
          "Категория": "Одежда", "Описание": "Магазин"}],
        ensure_ascii=False,
        indent=4,
    )

    result = simple_search(search_string, test_data)
    assert result == expected_result


def test_simple_search_match_in_category(test_data):
    search_string = "Еда"

    expected_result = json.dumps(
        [{"Дата операции": "2023-10-01", "Сумма операции": -1000.0,
          "Категория": "Еда", "Описание": "Магазин"},
         {"Дата операции": "2023-10-04", "Сумма операции": -200.0,
          "Категория": "Еда", "Описание": "Кафе"}],
        ensure_ascii=False,
        indent=4
    )

    result = simple_search(search_string, test_data)
    assert result == expected_result


def test_simple_search_no_match(test_data):
    search_string = "Цветы"
    expected_result = json.dumps([], ensure_ascii=False, indent=4)
    result = simple_search(search_string, test_data)
    assert result == expected_result


testing = [
    # один перевод
    (
        [{"Дата операции": "2023-10-01", "Сумма операции": -1000.0, "Категория": "Еда", "Описание": "Магазин"},
         {"Дата операции": "2023-10-03", "Сумма операции": -1500.0, "Категория": "Переводы", "Описание": "Иван Ф."},
         {"Дата операции": "2023-10-05", "Сумма операции": -3000.0, "Категория": "Одежда", "Описание": "Магазин"}, ],
        [{"Дата операции": "2023-10-03", "Сумма операции": -1500.0, "Категория": "Переводы", "Описание": "Иван Ф."}, ],
    ),
    # несколько переводов
    (
        [
            {"Дата операции": "2023-10-01", "Сумма операции": -1000.0, "Категория": "Еда", "Описание": "Магазин"},
            {"Дата операции": "2023-10-03", "Сумма операции": -1500.0, "Категория": "Переводы", "Описание": "Иван Ф."},
            {"Дата операции": "2023-10-04", "Сумма операции": -2000.0, "Категория": "Переводы", "Описание": "Ольга С."},
            {"Дата операции": "2023-10-05", "Сумма операции": -3000.0, "Категория": "Одежда", "Описание": "Магазин"},
        ],
        [
            {"Дата операции": "2023-10-03", "Сумма операции": -1500.0, "Категория": "Переводы", "Описание": "Иван Ф."},
            {"Дата операции": "2023-10-04", "Сумма операции": -2000.0, "Категория": "Переводы", "Описание": "Ольга С."},
        ],
    ),
    # нет переводов
    (
        [
            {"Дата операции": "2023-10-01", "Сумма операции": -1000.0, "Категория": "Еда", "Описание": "Магазин"},
            {"Дата операции": "2023-10-05", "Сумма операции": -3000.0, "Категория": "Одежда", "Описание": "Магазин"},
        ],
        [],
    ),
    # пустой список транзакций
    (
        [],
        [],
    ),
]


@pytest.mark.parametrize("transactions, expected", testing)
def test_search_transfers(transactions, expected):
    result = search_personal_transfers(transactions)
    expected_json = json.dumps(expected, ensure_ascii=False, indent=4)
    assert result == expected_json
